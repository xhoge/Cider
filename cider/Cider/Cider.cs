using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.Contracts;
using System.Drawing.Imaging;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace cider
{

    internal class Cider
    {
        Form window;
        public Cider(Form window) { 
            this.window = window;
        }

        private CPU cpu;
        public GamePad gamepad;

        public void Run(string rompath)
        {
            
            byte[] rom = new byte[] {
/* 0x600 */     0x20, 0x06, 0x06, 0x20, 0x38, 0x06, 0x20, 0x0d, 0x06, 0x20, 0x2a, 0x06, 0x60, 0xa9, 0x02, 0x85,
/* 0x610 */     0x02, 0xa9, 0x04, 0x85, 0x03, 0xa9, 0x11, 0x85, 0x10, 0xa9, 0x10, 0x85, 0x12, 0xa9, 0x0f, 0x85,
/* 0x620 */     0x14, 0xa9, 0x04, 0x85, 0x11, 0x85, 0x13, 0x85, 0x15, 0x60, 0xa5, 0xfe, 0x85, 0x00, 0xa5, 0xfe,
/* 0x630 */     0x29, 0x03, 0x18, 0x69, 0x02, 0x85, 0x01, 0x60, 0x20, 0x4d, 0x06, 0x20, 0x8d, 0x06, 0x20, 0xc3,
/* 0x640 */     0x06, 0x20, 0x19, 0x07, 0x20, 0x20, 0x07, 0x20, 0x2d, 0x07, 0x4c, 0x38, 0x06, 0xa5, 0xff, 0xc9,
/* 0x650 */     0x77, 0xf0, 0x0d, 0xc9, 0x64, 0xf0, 0x14, 0xc9, 0x73, 0xf0, 0x1b, 0xc9, 0x61, 0xf0, 0x22, 0x60,
/* 0x660 */     0xa9, 0x04, 0x24, 0x02, 0xd0, 0x26, 0xa9, 0x01, 0x85, 0x02, 0x60, 0xa9, 0x08, 0x24, 0x02, 0xd0,
/* 0x670 */     0x1b, 0xa9, 0x02, 0x85, 0x02, 0x60, 0xa9, 0x01, 0x24, 0x02, 0xd0, 0x10, 0xa9, 0x04, 0x85, 0x02,
/* 0x680 */     0x60, 0xa9, 0x02, 0x24, 0x02, 0xd0, 0x05, 0xa9, 0x08, 0x85, 0x02, 0x60, 0x60, 0x20, 0x94, 0x06,
/* 0x690 */     0x20, 0xa8, 0x06, 0x60, 0xa5, 0x00, 0xc5, 0x10, 0xd0, 0x0d, 0xa5, 0x01, 0xc5, 0x11, 0xd0, 0x07,
/* 0x6A0 */     0xe6, 0x03, 0xe6, 0x03, 0x20, 0x2a, 0x06, 0x60, 0xa2, 0x02, 0xb5, 0x10, 0xc5, 0x10, 0xd0, 0x06,
/* 0x6B0 */     0xb5, 0x11, 0xc5, 0x11, 0xf0, 0x09, 0xe8, 0xe8, 0xe4, 0x03, 0xf0, 0x06, 0x4c, 0xaa, 0x06, 0x4c,
/* 0x6C0 */     0x35, 0x07, 0x60, 0xa6, 0x03, 0xca, 0x8a, 0xb5, 0x10, 0x95, 0x12, 0xca, 0x10, 0xf9, 0xa5, 0x02,
/* 0x6D0 */     0x4a, 0xb0, 0x09, 0x4a, 0xb0, 0x19, 0x4a, 0xb0, 0x1f, 0x4a, 0xb0, 0x2f, 0xa5, 0x10, 0x38, 0xe9,
/* 0x6E0 */     0x20, 0x85, 0x10, 0x90, 0x01, 0x60, 0xc6, 0x11, 0xa9, 0x01, 0xc5, 0x11, 0xf0, 0x28, 0x60, 0xe6,
/* 0x6F0 */     0x10, 0xa9, 0x1f, 0x24, 0x10, 0xf0, 0x1f, 0x60, 0xa5, 0x10, 0x18, 0x69, 0x20, 0x85, 0x10, 0xb0,
/* 0x700 */     0x01, 0x60, 0xe6, 0x11, 0xa9, 0x06, 0xc5, 0x11, 0xf0, 0x0c, 0x60, 0xc6, 0x10, 0xa5, 0x10, 0x29,
/* 0x710 */     0x1f, 0xc9, 0x1f, 0xf0, 0x01, 0x60, 0x4c, 0x35, 0x07, 0xa0, 0x00, 0xa5, 0xfe, 0x91, 0x00, 0x60,
/* 0x720 */     0xa6, 0x03, 0xa9, 0x00, 0x81, 0x10, 0xa2, 0x00, 0xa9, 0x01, 0x81, 0x10, 0x60, 0xa2, 0x00, 0xea,
/* 0x730 */     0xea, 0xca, 0xd0, 0xfb, 0x60
            };

            cpu = new CPU();
            gamepad = new GamePad();
            cpu.load(rom);
            cpu.reset();

            Int32[] Bits = new int[32 * 32];
            GCHandle bitsHandle = GCHandle.Alloc(Bits, GCHandleType.Pinned);
            Bitmap img = new Bitmap(32, 32, 32*4 , PixelFormat.Format32bppRgb, bitsHandle.AddrOfPinnedObject());
            window.monitor.Image = img;
            bool progress =true;
            Random r1 = new Random();
            

            Task myTask = Task.Run(() =>
            {
                while(progress)
                {
                    cpu.mem_write(0xfe, (byte)r1.Next(1,16));
                    cpu.mem_write(0xff, gamepad.key_code);
                    progress = cpu.exec();
                    
                    foreach (UInt16 i in Enumerable.Range(0x200, 0x400))
                    {
                        Int32 c = color(cpu.mem_read(i));
                        if (Bits[i - 0x200] != c) {
                            Bits[i - 0x200] = c;
                        }
                    }
                    Task.Delay(4000);
                    window.monitor.Invalidate();
                }
            });
        }
        private Int32 color(byte value)
        {
            switch (value) {
                case 0: return ColorTranslator.ToWin32(Color.Black);
                case 1: return ColorTranslator.ToWin32(Color.White);
                case 2: case 9: return ColorTranslator.ToWin32(Color.Gray);
                case 3: case 10: return ColorTranslator.ToWin32(Color.Red);
                case 4: case 11: return ColorTranslator.ToWin32(Color.Green);
                case 5: case 12: return ColorTranslator.ToWin32(Color.Blue);
                case 6: case 13: return ColorTranslator.ToWin32(Color.Magenta);
                case 7: case 14: return ColorTranslator.ToWin32(Color.Yellow);
                default: return ColorTranslator.ToWin32(Color.Cyan);
            }
        }
        public void cpu_test3()
        {
            cpu = new CPU();
            cpu.mem_write(0x10, 0x55);
            
            Debug.Assert(cpu.mem_read(0x10) == 0x55);
            cpu.mem_load_and_run(new byte[] { 0xa5, 0x10, 0x00 });
            Debug.Assert(cpu.register_a == 0x55);
        }
    }
}
